{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"api.html","text":"mkdocstrings.handlers.crystal.collector.CrystalCollector # root : DocModule property readonly # The top-level namespace, represented as a fake module. __init__ ( self , crystal_docs_flags : Sequence [ str ] = ()) special # Create a \"collector\", reading docs from crystal doc in the current directory. When using mkdocstrings-crystal within MkDocs, a plugin can access the instance as config['plugins']['mkdocstrings'].get_handler('crystal').collector . collect ( self , identifier : str , config : Mapping [ str , Any ]) -> DocView # Find an item by its identifier. Exceptions: Type Description CollectionError When an item by that identifier couldn't be found. teardown ( self ) # Teardown the collector. This method should be implemented to, for example, terminate a subprocess that was started when creating the collector instance. mkdocstrings.handlers.crystal.items.DocItem # A representation of a documentable item from Crystal language. abs_id : str property readonly # The absolute identifier of this item, sometimes known as \"path\", e.g. Foo::Bar or Foo::Bar#baz(x,y) . This is also the canonical identifier that will be used as its HTML id. doc : str property readonly # The doc comment of this item. kind : str property readonly # One of: module, class, struct, enum, alias, annotation, instance_method, class_method, macro, constant name : str property readonly # The name of this item, e.g. Foo or baz . parent : Optional [ mkdocstrings . handlers . crystal . items . DocItem ] # The item that is the parent namespace for this item. rel_id : str property readonly # The relative identifier of this item, e.g. Foo or baz(x,y) . lookup ( self , identifier : Union [ str , DocPath ]) -> DocItem # Find an item by its identifier, relative to this item or the root. Parameters: Name Type Description Default identifier Union[str, DocPath] The item to search for. required Returns: Type Description DocItem An object that's a subclass of DocItem. Exceptions: Type Description CollectionError When an item by that identifier couldn't be found. Subclasses of DocItem # DocType # A DocItem representing a Crystal type. ancestors : Sequence [ DocPath ] property readonly # The modules and classes this type inherited. class_methods : DocMapping [ DocClassMethod ] property readonly # The class methods within this type. constants : DocMapping [ DocConstant ] property readonly # The constants (or enum members) within this type. constructors : DocMapping [ DocConstructor ] property readonly # The constructors within this type. extended_modules : Sequence [ DocPath ] property readonly # The modules that this type extended. full_name : str property readonly # The path of this item, e.g. Foo::Bar(T) or baz . included_modules : Sequence [ DocPath ] property readonly # The modules that this type included. including_types : Sequence [ DocPath ] property readonly # Known types that include this type. instance_methods : DocMapping [ DocInstanceMethod ] property readonly # The instance methods within this type. is_abstract : bool property readonly # Whether this type is abstract. locations : Sequence [ DocLocation ] property readonly # The code locations over which the definitions of this type span. macros : DocMapping [ DocMacro ] property readonly # The macros within this type. subclasses : Sequence [ DocPath ] property readonly # Known subclasses of this type. superclass : Optional [ DocPath ] property readonly # The possible superclass of this type. types : DocMapping [ DocType ] property readonly # The types nested in this type as a namespace. walk_types ( self ) -> Iterator [ DocType ] # Recusively iterate over all types under this type (excl. itself) in lexicographic order. Subclasses of DocType # DocModule # A DocType representing a Crystal module. DocClass # A DocType representing a Crystal class. DocStruct # A DocType representing a Crystal struct. DocEnum # A DocType representing a Crystal enum. DocAlias # A DocType representing a Crystal alias. aliased : crystal_html . TextWithLinks property readonly # A rich string containing the definition of what this is aliased to. DocAnnotation # A DocType representing a Crystal annotation. DocConstant # A DocItem representing a Crystal constant definition. value : str property readonly # The value of the constant (the code as a string). DocMethod # A DocItem representing a Crystal method. args_string : crystal_html . TextWithLinks property readonly # A rich string with the method's parameters. e.g. (foo : Bar) : Baz is_abstract : bool property readonly # Whether this method is abstract. location : Optional [ DocLocation ] property readonly # Code location of this method. Can be None if unknown. short_name property readonly # Similar to rel_id , but also includes the separator first, e.g. #bar(x,y) or .baz() Subclasses of DocMethod # DocInstanceMethod # A DocMethod representing a Crystal instance method. DocClassMethod # A DocMethod representing a Crystal class method. DocConstructor # A DocInstanceMethod representing a Crystal macro. DocMacro # A DocMethod representing a Crystal macro. Utilities # mkdocstrings.handlers.crystal.items.DocMapping # Represents items contained within a type. A container of DocItem s. __bool__ ( self ) -> bool special # bool(mapping) to check whether it's non-empty. __contains__ ( self , key : str ) -> bool special # \"identifier\" in mapping to check whether the mapping contains an item by this identifier (see DocItem.rel_id ). __getitem__ ( self , key : str ) -> D special # mapping[\"identifier\"] to get the item by this identifier (see DocItem.rel_id ). Returns: Type Description D A DocItem Exceptions: Type Description KeyError if the item is missing. __iter__ ( self ) -> Iterator [ D ] special # Iterate over the items like a list. __len__ ( self ) -> int special # len(mapping) to get the number of items. mkdocstrings.handlers.crystal.items.DocLocation dataclass # A location in code where an item was found. filename : str dataclass-field # The absolute path to the file. line : int dataclass-field # The (1-based) line number in the file. url : Optional [ str ] dataclass-field # The derived URL of this location on a source code hosting site. mkdocstrings.handlers.crystal.items.DocPath # A path to a documentable Crystal item. abs_id : str property readonly # The absolute identifier of this item, sometimes known as \"path\", e.g. Foo::Bar or Foo::Bar#baz . full_name : str property readonly # The path of this item, e.g. Foo::Bar(T) or baz . __str__ ( self ) -> str special # Convert to string -- same as full_name . lookup ( self ) -> DocItem # Look up this item in its originating doc structure. Exceptions: Type Description CollectionError When an item by this identifier couldn't be found. mkdocstrings.handlers.crystal.crystal_html.TextWithLinks # A string with embedded information about which parts of it are links to other items. Can be converted to an actual string with str(obj) -- or used directly, being a subclass of str . The link information is currently for internal use only.","title":"Api"},{"location":"api.html#mkdocstrings.handlers.crystal.collector.CrystalCollector","text":"","title":"CrystalCollector"},{"location":"api.html#mkdocstrings.handlers.crystal.collector.CrystalCollector.root","text":"The top-level namespace, represented as a fake module.","title":"root"},{"location":"api.html#mkdocstrings.handlers.crystal.collector.CrystalCollector.__init__","text":"Create a \"collector\", reading docs from crystal doc in the current directory. When using mkdocstrings-crystal within MkDocs, a plugin can access the instance as config['plugins']['mkdocstrings'].get_handler('crystal').collector .","title":"__init__()"},{"location":"api.html#mkdocstrings.handlers.crystal.collector.CrystalCollector.collect","text":"Find an item by its identifier. Exceptions: Type Description CollectionError When an item by that identifier couldn't be found.","title":"collect()"},{"location":"api.html#mkdocstrings.handlers.crystal.collector.CrystalCollector.teardown","text":"Teardown the collector. This method should be implemented to, for example, terminate a subprocess that was started when creating the collector instance.","title":"teardown()"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocItem","text":"A representation of a documentable item from Crystal language.","title":"DocItem"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocItem.abs_id","text":"The absolute identifier of this item, sometimes known as \"path\", e.g. Foo::Bar or Foo::Bar#baz(x,y) . This is also the canonical identifier that will be used as its HTML id.","title":"abs_id"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocItem.doc","text":"The doc comment of this item.","title":"doc"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocItem.kind","text":"One of: module, class, struct, enum, alias, annotation, instance_method, class_method, macro, constant","title":"kind"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocItem.name","text":"The name of this item, e.g. Foo or baz .","title":"name"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocItem.parent","text":"The item that is the parent namespace for this item.","title":"parent"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocItem.rel_id","text":"The relative identifier of this item, e.g. Foo or baz(x,y) .","title":"rel_id"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocItem.lookup","text":"Find an item by its identifier, relative to this item or the root. Parameters: Name Type Description Default identifier Union[str, DocPath] The item to search for. required Returns: Type Description DocItem An object that's a subclass of DocItem. Exceptions: Type Description CollectionError When an item by that identifier couldn't be found.","title":"lookup()"},{"location":"api.html#subclasses-of-docitem","text":"","title":"Subclasses of DocItem"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocType","text":"A DocItem representing a Crystal type.","title":"DocType"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocType.ancestors","text":"The modules and classes this type inherited.","title":"ancestors"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocType.class_methods","text":"The class methods within this type.","title":"class_methods"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocType.constants","text":"The constants (or enum members) within this type.","title":"constants"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocType.constructors","text":"The constructors within this type.","title":"constructors"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocType.extended_modules","text":"The modules that this type extended.","title":"extended_modules"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocType.full_name","text":"The path of this item, e.g. Foo::Bar(T) or baz .","title":"full_name"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocType.included_modules","text":"The modules that this type included.","title":"included_modules"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocType.including_types","text":"Known types that include this type.","title":"including_types"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocType.instance_methods","text":"The instance methods within this type.","title":"instance_methods"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocType.is_abstract","text":"Whether this type is abstract.","title":"is_abstract"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocType.locations","text":"The code locations over which the definitions of this type span.","title":"locations"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocType.macros","text":"The macros within this type.","title":"macros"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocType.subclasses","text":"Known subclasses of this type.","title":"subclasses"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocType.superclass","text":"The possible superclass of this type.","title":"superclass"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocType.types","text":"The types nested in this type as a namespace.","title":"types"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocType.walk_types","text":"Recusively iterate over all types under this type (excl. itself) in lexicographic order.","title":"walk_types()"},{"location":"api.html#subclasses-of-doctype","text":"","title":"Subclasses of DocType"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocModule","text":"A DocType representing a Crystal module.","title":"DocModule"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocClass","text":"A DocType representing a Crystal class.","title":"DocClass"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocStruct","text":"A DocType representing a Crystal struct.","title":"DocStruct"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocEnum","text":"A DocType representing a Crystal enum.","title":"DocEnum"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocAlias","text":"A DocType representing a Crystal alias.","title":"DocAlias"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocAlias.aliased","text":"A rich string containing the definition of what this is aliased to.","title":"aliased"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocAnnotation","text":"A DocType representing a Crystal annotation.","title":"DocAnnotation"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocConstant","text":"A DocItem representing a Crystal constant definition.","title":"DocConstant"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocConstant.value","text":"The value of the constant (the code as a string).","title":"value"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocMethod","text":"A DocItem representing a Crystal method.","title":"DocMethod"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocMethod.args_string","text":"A rich string with the method's parameters. e.g. (foo : Bar) : Baz","title":"args_string"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocMethod.is_abstract","text":"Whether this method is abstract.","title":"is_abstract"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocMethod.location","text":"Code location of this method. Can be None if unknown.","title":"location"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocMethod.short_name","text":"Similar to rel_id , but also includes the separator first, e.g. #bar(x,y) or .baz()","title":"short_name"},{"location":"api.html#subclasses-of-docmethod","text":"","title":"Subclasses of DocMethod"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocInstanceMethod","text":"A DocMethod representing a Crystal instance method.","title":"DocInstanceMethod"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocClassMethod","text":"A DocMethod representing a Crystal class method.","title":"DocClassMethod"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocConstructor","text":"A DocInstanceMethod representing a Crystal macro.","title":"DocConstructor"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocMacro","text":"A DocMethod representing a Crystal macro.","title":"DocMacro"},{"location":"api.html#utilities","text":"","title":"Utilities"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocMapping","text":"Represents items contained within a type. A container of DocItem s.","title":"DocMapping"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocMapping.__bool__","text":"bool(mapping) to check whether it's non-empty.","title":"__bool__()"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocMapping.__contains__","text":"\"identifier\" in mapping to check whether the mapping contains an item by this identifier (see DocItem.rel_id ).","title":"__contains__()"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocMapping.__getitem__","text":"mapping[\"identifier\"] to get the item by this identifier (see DocItem.rel_id ). Returns: Type Description D A DocItem Exceptions: Type Description KeyError if the item is missing.","title":"__getitem__()"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocMapping.__iter__","text":"Iterate over the items like a list.","title":"__iter__()"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocMapping.__len__","text":"len(mapping) to get the number of items.","title":"__len__()"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocLocation","text":"A location in code where an item was found.","title":"DocLocation"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocLocation.filename","text":"The absolute path to the file.","title":"filename"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocLocation.line","text":"The (1-based) line number in the file.","title":"line"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocLocation.url","text":"The derived URL of this location on a source code hosting site.","title":"url"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocPath","text":"A path to a documentable Crystal item.","title":"DocPath"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocPath.abs_id","text":"The absolute identifier of this item, sometimes known as \"path\", e.g. Foo::Bar or Foo::Bar#baz .","title":"abs_id"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocPath.full_name","text":"The path of this item, e.g. Foo::Bar(T) or baz .","title":"full_name"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocPath.__str__","text":"Convert to string -- same as full_name .","title":"__str__()"},{"location":"api.html#mkdocstrings.handlers.crystal.items.DocPath.lookup","text":"Look up this item in its originating doc structure. Exceptions: Type Description CollectionError When an item by this identifier couldn't be found.","title":"lookup()"},{"location":"api.html#mkdocstrings.handlers.crystal.crystal_html.TextWithLinks","text":"A string with embedded information about which parts of it are links to other items. Can be converted to an actual string with str(obj) -- or used directly, being a subclass of str . The link information is currently for internal use only.","title":"TextWithLinks"},{"location":"styles.html","text":"Recommended styles # /* Indentation of sub-items */ div . doc-contents : not ( . first ) { padding-left : 15 px ; border-left : 4 px solid rgba ( 230 , 230 , 230 ); } /* Don't capitalize names */ h5 . doc-heading { text-transform : none !important ; } /* [View source] links */ a . doc-source-link :: before { content : \"[\" ; color : var ( -- md - typeset - color ); } a . doc-source-link :: after { content : \"]\" ; color : var ( -- md - typeset - color ); }","title":"Styles"},{"location":"styles.html#recommended-styles","text":"/* Indentation of sub-items */ div . doc-contents : not ( . first ) { padding-left : 15 px ; border-left : 4 px solid rgba ( 230 , 230 , 230 ); } /* Don't capitalize names */ h5 . doc-heading { text-transform : none !important ; } /* [View source] links */ a . doc-source-link :: before { content : \"[\" ; color : var ( -- md - typeset - color ); } a . doc-source-link :: after { content : \"]\" ; color : var ( -- md - typeset - color ); }","title":"Recommended styles"}]}